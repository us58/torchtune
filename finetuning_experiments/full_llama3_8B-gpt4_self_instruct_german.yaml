# Usage:
#
# If model not already downloaded:
# tune download meta-llama/Meta-Llama-3-8B-Instruct --output-dir ../input/models/Meta-Llama-3-8B-Instruct --ignore-patterns "original/consolidated*" --hf-token <HF_TOKEN>
#
# The default config uses an optimizer from bitsandbytes. If you do not have it installed,
# you can install it with
#   pip install bitsandbytes
#
# Start finetuning:
# tune run full_finetune_single_device --config full_llama3_8B-gpt4_self_instruct_german.yaml
#
# To kill the wandb process:
# ps -aux | grep wandb | awk '{ print $2 }' | xargs kill
#
# You need to adjust all the absolute paths to the current working copy of the torchtune repository! 


# Model Arguments
model:
  _component_: torchtune.models.llama3.llama3_8b

tokenizer:
  _component_: torchtune.models.llama3.llama3_tokenizer
  path: /home/fr/fr_fr/fr_us58/workspace-11-05/torchtune/input/models/Meta-Llama-3-8B-Instruct/original/tokenizer.model  # adjust this!

checkpointer:
  _component_: torchtune.utils.FullModelHFCheckpointer
  checkpoint_dir: /home/fr/fr_fr/fr_us58/workspace-11-05/torchtune/input/models/Meta-Llama-3-8B-Instruct  # adjust this!
  checkpoint_files: [
    model-00001-of-00004.safetensors,
    model-00002-of-00004.safetensors,
    model-00003-of-00004.safetensors,
    model-00004-of-00004.safetensors
  ]
  recipe_checkpoint: null
  output_dir: /home/fr/fr_fr/fr_us58/workspace-11-05/torchtune/output/full_llama3_8B-gpt4_self_instruct_german/  # adjust this!
  model_type: LLAMA3
resume_from_checkpoint: False

# Dataset and Sampler
dataset:
  _component_: torchtune.datasets.gpt4_self_instruct_german_dataset
  train_on_input: True
seed: null
shuffle: True

# Fine-tuning arguments
batch_size: 2
epochs: 1
optimizer:
  _component_: bitsandbytes.optim.AdamW8bit
  lr: 2e-5
loss:
  _component_: torch.nn.CrossEntropyLoss
max_steps_per_epoch: null
gradient_accumulation_steps: 1
optimizer_in_bwd: True
compile: False

# Training environment
device: cuda

# Memory management
enable_activation_checkpointing: True

# Reduced precision
dtype: bf16

# enable logging to the built-in WandBLogger
metric_logger:
  _component_: torchtune.utils.metric_logging.WandBLogger
  # the W&B project to log to
  project: full_llama3_8B-gpt4_self_instruct_german

# Logging
# output_dir: /tmp/lora_finetune_output/
# metric_logger:
#   _component_: torchtune.utils.metric_logging.DiskLogger
#   log_dir: ${output_dir}
# log_every_n_steps: 1
# log_peak_memory_stats: False

# Show case the usage of pytorch profiler
# Set enabled to False as it's only needed for debugging training
# profiler:
#   _component_: torchtune.utils.profiler
#   enabled: True
#   output_dir: ${output_dir}/torchtune_perf_tracing.json
